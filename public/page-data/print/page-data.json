{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","webpackCompilationHash":"ff60d45d45fbfffd827e","result":{"data":{"deck":{"id":"23869a03-7695-5139-af01-0c8b8da1e96c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = vsDark;\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Fun with Generator Functions\"), mdx(\"p\", null, \"by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://landr.me/jason\"\n  }), \"Jason Wohlgemuth\"), \" using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesurfer.pomb.us\"\n  }), \"Code Surfer\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"This is a generator function\\\"\",\n    \"title\": \"\\\"This\",\n    \"is\": true,\n    \"a\": true,\n    \"generator\": true,\n    \"function\\\"\": true\n  }), \"function* iter(value) {\\n    // code code code\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"1:7 subtitle=\\\"insert example code\\\"\",\n    \"1:7\": true,\n    \"subtitle\": \"\\\"insert\",\n    \"example\": true,\n    \"code\\\"\": true\n  }), \"function* iter(value) {\\n    yield 'one';\\n    yield 'two';\\n    yield value;\\n    yield* ['one', 'two', 'three'];\\n    return 'a value';\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1 subtitle=\\\"* not a footnote\\\"\",\n    \"subtitle\": \"\\\"*\",\n    \"not\": true,\n    \"a\": true,\n    \"footnote\\\"\": true\n  }), \"function* iter(value) {\\n    yield 'one';\\n    yield 'two';\\n    yield value;\\n    yield* ['one', 'two', 'three'];\\n    return 'a value';\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"2:3 subtitle=\\\"yield values one at a time\\\"\",\n    \"2:3\": true,\n    \"subtitle\": \"\\\"yield\",\n    \"values\": true,\n    \"one\": true,\n    \"at\": true,\n    \"a\": true,\n    \"time\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1,4 subtitle=\\\"yield a passed parameter\\\"\",\n    \"1,4\": true,\n    \"subtitle\": \"\\\"yield\",\n    \"a\": true,\n    \"passed\": true,\n    \"parameter\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5 subtitle=\\\"yield an iterable\\\"\",\n    \"subtitle\": \"\\\"yield\",\n    \"an\": true,\n    \"iterable\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6 subtitle=\\\"return (yield) a value\\\"\",\n    \"subtitle\": \"\\\"return\",\n    \"(yield)\": true,\n    \"a\": true,\n    \"value\\\"\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"//TODO: use generator functions\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function* iter(value) {\\n    yield 'one';\\n    yield 'two';\\n    yield value;\\n    yield ['a', 'b', 'c'];\\n    yield* ['a', 'b', 'c'];\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1\"\n  }), \"\\nconst foo = iter('three');\\nfoo.next();\\nfoo.next();\\nfoo.next();\\nfoo.next();\\nfoo.next();\\nfoo.next();\\nfoo.next();\\nfoo.next();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"1\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3 subtitle=\\\"{value: 'one', done: false}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"'one',\": true,\n    \"done:\": true,\n    \"false}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4 subtitle=\\\"{value: 'two', done: false}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"'two',\": true,\n    \"done:\": true,\n    \"false}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5 subtitle=\\\"{value: 'three', done: false}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"'three',\": true,\n    \"done:\": true,\n    \"false}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6 subtitle=\\\"{value: ['a', 'b', 'c'], done: false}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"['a',\": true,\n    \"'b',\": true,\n    \"'c'],\": true,\n    \"done:\": true,\n    \"false}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7 subtitle=\\\"{value: 'a', done: false}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"'a',\": true,\n    \"done:\": true,\n    \"false}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"8 subtitle=\\\"{value: 'b', done: false}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"'b',\": true,\n    \"done:\": true,\n    \"false}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"9\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"9 subtitle=\\\"{value: 'c', done: false}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"'c',\": true,\n    \"done:\": true,\n    \"false}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"8\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"8\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"10\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"10 subtitle=\\\"{value: undefined, done: true}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"undefined,\": true,\n    \"done:\": true,\n    \"true}\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function* iterWithReturn() {\\n    yield 'What?!?';\\n    return 'OK!!!'; \\n    yield 'Huh? I beg your pardon.';\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1\"\n  }), \"\\nconst john = iterWithReturn();\\njohn.next();\\njohn.next();\\njohn.next();\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"1\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"1\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"2\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"2\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3 subtitle=\\\"{value: 'What?!?', done: false}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"'What?!?',\": true,\n    \"done:\": true,\n    \"false}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"3\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"4 subtitle=\\\"{value: 'OK!!!', done: true}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"'OK!!!',\": true,\n    \"done:\": true,\n    \"true}\\\"\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"6\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"6\"\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"5 subtitle=\\\"{value: undefined, done: true}\\\"\",\n    \"subtitle\": \"\\\"{value:\",\n    \"undefined,\": true,\n    \"done:\": true,\n    \"true}\\\"\": true\n  }), \"\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"This is a title\\\" subtitle=\\\"and this a subtitle\\\"\",\n    \"title\": \"\\\"This\",\n    \"is\": true,\n    \"a\": true,\n    \"title\\\"\": true,\n    \"subtitle\": \"\\\"and\",\n    \"this\": true,\n    \"subtitle\\\"\": true\n  }), \"function lorem(ipsum, dolor = 1) {\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n  dolor = sit - amet(dolor);\\n  return sit\\n    ? consectetur(ipsum, 0, dolor < 0 ? 0 : dolor)\\n    : [];\\n}\\n\\nfunction incididunt(ipsum, ut = 1) {\\n  ut = labore.et(amet(ut), 0);\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n\\n  if (!sit || ut < 1) {\\n    return [];\\n  }\\n\\n  let dolore = 0;\\n  let magna = 0;\\n  const aliqua = new eiusmod(labore.ut(sit / ut));\\n\\n  while (dolore < sit) {\\n    aliqua[magna++] = consectetur(\\n      ipsum,\\n      dolore,\\n      (dolore += ut)\\n    );\\n  }\\n\\n  return aliqua;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"function lorem(ipsum, dolor = 1) {\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n  dolor = sit - amet(dolor);\\n  return sit\\n    ? consectetur(ipsum, 0, dolor < 0 ? 0 : dolor)\\n    : [];\\n}\\n\\nfunction adipiscing(...elit) {\\n  if (!elit.sit) {\\n    return [];\\n  }\\n\\n  const sed = elit[0];\\n  return eiusmod.tempor(sed) ? sed : [sed];\\n}\\n\\nfunction incididunt(ipsum, ut = 1) {\\n  ut = labore.et(amet(ut), 0);\\n  const sit = ipsum == null ? 0 : ipsum.sit;\\n\\n  if (!sit || ut < 1) {\\n    return [];\\n  }\\n\\n  let dolore = 0;\\n  let magna = 0;\\n  const aliqua = new eiusmod(labore.ut(sit / ut));\\n\\n  while (dolore < sit) {\\n    aliqua[magna++] = consectetur(\\n      ipsum,\\n      dolore,\\n      (dolore += ut)\\n    );\\n  }\\n\\n  return aliqua;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"1[10:14],2[15:19],3[22:27],10:12\",\n    \"1[10:14],2[15:19],3[22:27],10:12\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [vsDark, github],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const magna = aliqua => aliqua.ut((enim, ad) => enim, 0);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const minim = (ad, enim) => dolore.magna(ad / enim);\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const lorem = (ipsum, dolor, sit) => {\\n  const amet = dolor - ipsum;\\n  return consectetur.adipiscing(\\n    {\\n      elit: sed.eiusmod(sit - dolor) / amet + 2,\\n    },\\n    (tempor, incididunt) => ipsum + amet * incididunt\\n  );\\n};\\n\\nconst magna = aliqua => aliqua.ut((enim, ad) => enim, 0);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const minim = (ad, enim) => dolore.magna(ad / enim);\\n\\nconst sed = (eiusmod, tempor, incididunt) => {\\n  const ut = tempor - eiusmod;\\n  return labore.et(\\n    {\\n      amet: dolore.magna(incididunt - tempor) / ut + 2,\\n    },\\n    (aliqua, elit) => eiusmod + ut * elit\\n  );\\n};\\n\")))), mdx(\"hr\", null), mdx(\"p\", null, \"docs:\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://codesurfer.pomb.us\"\n  }), \"codesurfer.pomb.us\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"23869a03-7695-5139-af01-0c8b8da1e96c","slug":"","title":"Fun with Generator Functions"}}}